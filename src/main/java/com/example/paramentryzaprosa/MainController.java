package com.example.paramentryzaprosa;

import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class MainController{

    @RequestMapping("/home")
    //@RequestParam означает принятый элемент по параметру запроса как эта http://localhost:8080/home?color=blue
    //Чтобы передать несколько паремтров передаем через &,  Например http://localhost:8080/home?color=blue&name=Jane
    //Синтаксис: Ключ запроса = параметр запроса

    public String home(@RequestParam String color, @RequestParam String name, Model page) {
        page.addAttribute("username", name);
        page.addAttribute("color", color);
        return "home.html";
    }
}

//8.1.2. Передача данных от клиента серверу посредством параметров запроса
//  Ниже мы выполним пример, демонстрирующий использование параметров
//  HTTP-запроса — простой способ передачи данных от клиента бэкенду. Этот прием часто встречается в реальных приложениях. Параметры запроса применяют
//  в следующих случаях:
// 1) объем данных не очень велик. Параметры запроса задаются посредством переменных запроса (как будет показано далее).
//    Этот метод позволяет отправить максимум около 2000 символов;
// 2) нужно передать необязательные данные. Параметры запроса — простой способ выслать значения, которые клиент не обязан передавать.
//    Сервер будет готов не получить значения определенных параметров запроса

//    Типичный случай использования параметров запроса — определение критериев
//    поиска и фильтрации (рис. 8.5). Предположим, приложение выводит товары и их
//    свойства в виде таблицы. У каждого есть наименование, цена и бренд.
//    Мы хотим, чтобы пользователь мог найти товар по любому из этих критериев: цене,
//    наименованию, бренду или по сочетанию данных характеристик. Здесь было бы
//    правильно использовать параметры запроса. Приложение отправляет значения
//    (наименование, цену, бренд) в виде необязательных параметров. Клиенту нужно
//    передать только те из них, по которым пользователь решил выполнить поиск.

//////////////
//    По умолчанию параметр запроса является обязательным. Если клиент не передает
//    значение для него, сервер возвращает HTTP-статус 400 Bad Request. Чтобы значение
//    перестало быть обязательным, нужно явно прописать это в аннотации с помощью
//    дополнительного атрибута: @RequestParam(optional=true). Если используем можно прописывать false либо нет оно стоит по умолчанию
//////////////


